// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/oleglarionov/otusgolang_hw/hw12_13_14_15_calendar/internal/common"
	"github.com/oleglarionov/otusgolang_hw/hw12_13_14_15_calendar/internal/infrstructure/logger/logrus"
	"github.com/oleglarionov/otusgolang_hw/hw12_13_14_15_calendar/internal/infrstructure/rabbit"
)

// Injectors from wire.go:

func setup(cfg Config) (*SenderApp, func(), error) {
	logger, err := loggerProvider(cfg)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup := rabbitClientProvider(cfg)
	senderApp := NewApp(logger, client)
	return senderApp, func() {
		cleanup()
	}, nil
}

// wire.go:

func loggerProvider(cfg Config) (common.Logger, error) {
	return logrusadapter.New(logrusadapter.Config(cfg.Logger))
}

func rabbitClientProvider(cfg Config) (*rabbit.Client, func()) {
	client := rabbit.NewClient(rabbit.Config(cfg.Rabbit))
	cleanup := func() {
		client.Close()
	}
	return client, cleanup
}
